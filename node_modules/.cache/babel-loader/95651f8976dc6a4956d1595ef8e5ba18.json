{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\om\\\\Desktop\\\\Instagram-clone\\\\src\\\\Pages\\\\Feed\\\\Feed.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport { Backdrop, CircularProgress } from '@material-ui/core';\nimport uuid from 'react-uuid';\nimport { useStateValue } from '../../context/StateProvider';\nimport { database, storage } from '../../firebase/firebase.utils';\nimport useStyles from './styles';\nimport Header from '../../components/Header/Header';\nimport Video from '../../components/Video/Video';\nimport Overlay from '../../components/Overlay/Overlay';\nimport Form from '../../components/Form/Form';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Feed() {\n  _s();\n\n  const [Loading, setLoading] = useState(false);\n  const [video, setVideo] = useState({});\n  const [show, setShow] = useState(false);\n  const feedRef = useRef(null);\n  const {\n    state: {\n      user,\n      post\n    }\n  } = useStateValue();\n  const classes = useStyles();\n\n  const openOverlay = videoObject => {\n    setVideo(videoObject);\n    setShow(true);\n  };\n\n  const closeOverlay = e => {\n    if (e.target === feedRef.current) {\n      setVideo({});\n      setShow(false);\n    }\n  };\n\n  const handleSubmit = (postInfoObj, setPostData) => {\n    if (!postInfoObj.selectedFile) {\n      alert(\"No Post is selected. Either you have not selected any file or the file size is too big. Please try again!!\");\n      return;\n    }\n\n    let pid = uuid();\n    let {\n      selectedFile\n    } = postInfoObj;\n    setLoading(true);\n    const uploadTaskListener = storage.ref(`/posts/${pid}`).put(selectedFile); // fn1 -> progress\n    // fn2 -> error\n    // fn3-> success\n\n    uploadTaskListener.on(\"state_changed\", fn1, fn2, fn3);\n\n    function fn1(snapshot) {\n      var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      console.log(progress);\n    }\n\n    function fn2(error) {\n      alert(\"There was an error in uploading the file \", error.message);\n      return;\n    }\n\n    async function fn3() {\n      // link get\n      let downloadurl = await uploadTaskListener.snapshot.ref.getDownloadURL();\n      let postObj = {\n        comments: [],\n        likes: [],\n        song: postInfoObj.title,\n        message: postInfoObj.message,\n        downloadurl,\n        auid: user.userId,\n        postId: pid,\n        createdAt: database.getUserTimeStamp()\n      };\n      console.log(\"setting post....\");\n      await database.posts.doc(pid).set(postObj);\n      console.log(\"updating user....\");\n      await database.users.doc(user.userId).update({\n        postIds: [...user.postIds, pid]\n      });\n      console.log(\"setting loading to false....\");\n      setPostData({\n        title: \"\",\n        message: \"\",\n        selectedFile: \"\"\n      }); // setLoading(false);\n    }\n  };\n\n  const callback = async entries => {\n    entries.forEach(element => {\n      let el = element.target.childNodes[0]; // el.play is asynchronous\n\n      el.play().then(() => {\n        if (!el.paused && element.isIntersecting != true) {\n          el.pause();\n        }\n      });\n    });\n  };\n\n  const observer = new IntersectionObserver(callback, {\n    root: null,\n    threshold: 0.9\n  });\n  useEffect(() => {\n    if (typeof window == 'object') {\n      let elements = document.querySelectorAll('.videos');\n      elements.forEach(el => {\n        observer.observe(el);\n      });\n\n      if (Loading) {\n        setLoading(false);\n      }\n\n      return () => {\n        observer.disconnect();\n      };\n    }\n  }, [post]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.formContainer,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        handleSubmit: handleSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      ref: feedRef,\n      className: classes.feedContainer,\n      onClick: closeOverlay,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.videoContainer,\n        children: post.map((obj, i) => /*#__PURE__*/_jsxDEV(Video, { ...obj,\n          handleOverlay: openOverlay\n        }, obj.postId, false, {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 33\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 21\n      }, this), show && /*#__PURE__*/_jsxDEV(Overlay, {\n        videoObj: video\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 30\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(Backdrop, {\n      className: classes.backdrop,\n      open: Loading,\n      children: /*#__PURE__*/_jsxDEV(CircularProgress, {\n        color: \"inherit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 13\n  }, this);\n}\n\n_s(Feed, \"V/rT9ypzj7uwOGkgOWoGWqvWj9o=\", false, function () {\n  return [useStateValue, useStyles];\n});\n\n_c = Feed;\nexport default Feed;\n\nvar _c;\n\n$RefreshReg$(_c, \"Feed\");","map":{"version":3,"sources":["C:/Users/om/Desktop/Instagram-clone/src/Pages/Feed/Feed.jsx"],"names":["React","useEffect","useRef","useState","Backdrop","CircularProgress","uuid","useStateValue","database","storage","useStyles","Header","Video","Overlay","Form","Feed","Loading","setLoading","video","setVideo","show","setShow","feedRef","state","user","post","classes","openOverlay","videoObject","closeOverlay","e","target","current","handleSubmit","postInfoObj","setPostData","selectedFile","alert","pid","uploadTaskListener","ref","put","on","fn1","fn2","fn3","snapshot","progress","bytesTransferred","totalBytes","console","log","error","message","downloadurl","getDownloadURL","postObj","comments","likes","song","title","auid","userId","postId","createdAt","getUserTimeStamp","posts","doc","set","users","update","postIds","callback","entries","forEach","element","el","childNodes","play","then","paused","isIntersecting","pause","observer","IntersectionObserver","root","threshold","window","elements","document","querySelectorAll","observe","disconnect","formContainer","feedContainer","videoContainer","map","obj","i","backdrop"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef, useState } from 'react'\r\nimport { Backdrop, CircularProgress } from '@material-ui/core';\r\nimport uuid from 'react-uuid';\r\n\r\nimport { useStateValue } from '../../context/StateProvider';\r\nimport { database, storage } from '../../firebase/firebase.utils';\r\nimport useStyles from './styles';\r\nimport Header from '../../components/Header/Header'\r\nimport Video from '../../components/Video/Video';\r\nimport Overlay from '../../components/Overlay/Overlay';\r\nimport Form from '../../components/Form/Form';\r\n\r\nfunction Feed() {\r\n    const [Loading, setLoading] = useState(false);\r\n    const [video, setVideo] = useState({})\r\n    const [show, setShow] = useState(false)\r\n    const feedRef = useRef(null)\r\n    const { state: { user, post } } = useStateValue()\r\n\r\n    const classes = useStyles();\r\n\r\n    const openOverlay = (videoObject) => {\r\n        setVideo(videoObject)\r\n        setShow(true)\r\n    }\r\n\r\n    const closeOverlay = (e) => {\r\n        if(e.target === feedRef.current){\r\n            setVideo({});\r\n            setShow(false);\r\n        }\r\n    }\r\n\r\n    const handleSubmit = (postInfoObj, setPostData) => {\r\n      if (!postInfoObj.selectedFile) {\r\n        alert(\r\n          \"No Post is selected. Either you have not selected any file or the file size is too big. Please try again!!\"\r\n        );\r\n        return;\r\n      }\r\n      let pid = uuid();\r\n      let { selectedFile } = postInfoObj;\r\n      setLoading(true);\r\n      const uploadTaskListener = storage.ref(`/posts/${pid}`).put(selectedFile);\r\n\r\n      // fn1 -> progress\r\n      // fn2 -> error\r\n      // fn3-> success\r\n      uploadTaskListener.on(\"state_changed\", fn1, fn2, fn3);\r\n\r\n      function fn1(snapshot) {\r\n        var progress = (snapshot.bytesTransferred / snapshot.totalBytes) * 100;\r\n        console.log(progress);\r\n      }\r\n      function fn2(error) {\r\n        alert(\"There was an error in uploading the file \", error.message);\r\n        return;\r\n      }\r\n      async function fn3() {\r\n        // link get\r\n        let downloadurl =\r\n          await uploadTaskListener.snapshot.ref.getDownloadURL();\r\n\r\n        let postObj = {\r\n          comments: [],\r\n          likes: [],\r\n          song: postInfoObj.title,\r\n          message: postInfoObj.message,\r\n          downloadurl,\r\n          auid: user.userId,\r\n          postId: pid,\r\n          createdAt: database.getUserTimeStamp(),\r\n        };\r\n\r\n        console.log(\"setting post....\");\r\n        await database.posts.doc(pid).set(postObj);\r\n\r\n        console.log(\"updating user....\");\r\n\r\n        await database.users.doc(user.userId).update({\r\n          postIds: [...user.postIds, pid],\r\n        });\r\n\r\n        console.log(\"setting loading to false....\");\r\n        setPostData({ title: \"\", message: \"\", selectedFile: \"\" });\r\n        // setLoading(false);\r\n      }\r\n    };\r\n    const callback = async entries => {\r\n        entries.forEach(element => {\r\n            let el = element.target.childNodes[0];\r\n            // el.play is asynchronous\r\n            el.play().then(() => {\r\n\r\n                if ( !el.paused && element.isIntersecting != true) {\r\n                    el.pause();\r\n                }\r\n            })\r\n        });\r\n    };\r\n\r\n    const observer = new IntersectionObserver(callback, {\r\n        root: null,\r\n        threshold: 0.9,\r\n    });\r\n\r\n    useEffect(() => {\r\n        if (typeof window == 'object') {\r\n            let elements = document.querySelectorAll('.videos')\r\n            elements.forEach(el => {\r\n                observer.observe(el);\r\n            })\r\n\r\n            if(Loading){\r\n                setLoading(false);\r\n            }\r\n            \r\n            return () =>{\r\n                observer.disconnect();\r\n            } \r\n        }\r\n    }, [post]);\r\n\r\n    return (\r\n            <div>\r\n                <Header />\r\n                <div className={classes.formContainer}>\r\n                    <Form handleSubmit={handleSubmit} />\r\n                </div>\r\n                <div ref={feedRef} className={classes.feedContainer} onClick={closeOverlay}>\r\n                    <div className={classes.videoContainer}>\r\n                        {\r\n                            post.map((obj, i) => (\r\n                                <Video\r\n                                    key={obj.postId}\r\n                                    {...obj}\r\n                                    handleOverlay={openOverlay}\r\n                                >\r\n                                </Video>\r\n                            ))\r\n                        }\r\n                    </div>\r\n                    {show && <Overlay videoObj={video} />}\r\n                </div>\r\n                <Backdrop className={classes.backdrop} open={Loading}>\r\n                    <CircularProgress color=\"inherit\" />\r\n                </Backdrop>\r\n            </div>\r\n            )\r\n}\r\n\r\nexport default Feed;\r\n"]},"metadata":{},"sourceType":"module"}